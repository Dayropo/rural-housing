// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Users model
model User {
  id                   Int      @id @default(autoincrement())
  username             String   @unique
  password             String
  email                String   @unique
  name                 String?
  avatar               String?
  isAdmin              Boolean  @default(false) @map("is_admin")
  createdAt            DateTime @default(now()) @map("created_at")
  properties           Property[]
  rentalApplications   RentalApplication[]
  reviewedSubmissions  ApplicationSubmission[] @relation("ReviewedBy")

  @@map("users")
}

// Properties model
model Property {
  id                 Int             @id @default(autoincrement())
  title              String
  address            String
  city               String
  state              String
  zipCode            String          @map("zip_code")
  price              Int
  bedrooms           Int
  bathrooms          Int
  squareFeet         Int             @map("square_feet")
  description        String
  propertyType       String          @map("property_type")
  status             String          @default("available")
  isRental           Boolean         @default(false) @map("is_rental")
  rentalPrice        Int?            @map("rental_price")
  featuredImage      String?         @map("featured_image")
  createdAt          DateTime        @default(now()) @map("created_at")
  updatedAt          DateTime        @default(now()) @map("updated_at")
  createdById        Int?            @map("created_by_id")
  acres              String?
  yearBuilt          Int?            @map("year_built")
  displayOnHomepage  Boolean         @default(false) @map("display_on_homepage")
  
  createdBy          User?           @relation(fields: [createdById], references: [id])
  images             PropertyImage[]

  @@map("properties")
}

// Property Images model
model PropertyImage {
  id           Int      @id @default(autoincrement())
  propertyId   Int      @map("property_id")
  imageUrl     String   @map("image_url")
  caption      String?
  displayOrder Int      @default(0) @map("display_order")
  createdAt    DateTime @default(now()) @map("created_at")
  
  property     Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@map("property_images")
}

// Email Subscriptions model
model EmailSubscription {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  isActive  Boolean  @default(true) @map("is_active")

  @@map("email_subscriptions")
}

// Cash Offer Requests model
model CashOfferRequest {
  id                Int      @id @default(autoincrement())
  name              String
  email             String
  phone             String
  address           String
  city              String
  state             String
  zipCode           String   @map("zip_code")
  propertyType      String   @map("property_type")
  condition         String
  timeframe         String
  additionalInfo    String?  @map("additional_info")
  status            String   @default("new")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @map("updated_at")

  @@map("cash_offer_requests")
}

// Testimonials model
model Testimonial {
  id        Int      @id @default(autoincrement())
  name      String
  location  String?
  rating    Int
  comment   String
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("testimonials")
}

// Rental Applications model
model RentalApplication {
  id                   Int                     @id @default(autoincrement())
  userId               Int                     @map("user_id")
  firstName            String                  @map("first_name")
  lastName             String                  @map("last_name")
  email                String
  phone                String
  currentAddress       String                  @map("current_address")
  city                 String
  state                String
  zipCode              String                  @map("zip_code")
  moveInDate           DateTime                @map("move_in_date")
  employer             String?
  occupation           String?
  monthlyIncome        Int                     @map("monthly_income")
  additionalOccupants  Int                     @map("additional_occupants")
  pets                 Boolean                 @default(false)
  petDetails           String?                 @map("pet_details")
  creditScore          Int?                    @map("credit_score")
  hasEvictions         Boolean                 @default(false) @map("has_evictions")
  hasFelonies          Boolean                 @default(false) @map("has_felonies")
  additionalInfo       String?                 @map("additional_info")
  isComplete           Boolean                 @default(false) @map("is_complete")
  isVerified           Boolean                 @default(false) @map("is_verified")
  createdAt            DateTime                @default(now()) @map("created_at")
  updatedAt            DateTime                @default(now()) @map("updated_at")
  
  user                 User                    @relation(fields: [userId], references: [id])
  submissions          ApplicationSubmission[]
  documents            ApplicationDocument[]

  @@map("rental_applications")
}

// Application Submissions model
model ApplicationSubmission {
  id             Int               @id @default(autoincrement())
  applicationId  Int               @map("application_id")
  propertyId     Int               @map("property_id")
  status         String            @default("pending")
  notes          String?
  reviewedById   Int?              @map("reviewed_by_id")
  reviewedAt     DateTime?         @map("reviewed_at")
  createdAt      DateTime          @default(now()) @map("created_at")
  updatedAt      DateTime          @default(now()) @map("updated_at")
  
  application    RentalApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  reviewedBy     User?             @relation("ReviewedBy", fields: [reviewedById], references: [id])

  @@map("application_submissions")
}

// Application Documents model
model ApplicationDocument {
  id            Int               @id @default(autoincrement())
  applicationId Int               @map("application_id")
  documentType  String            @map("document_type")
  documentUrl   String            @map("document_url")
  fileName      String            @map("file_name")
  fileSize      Int               @map("file_size")
  uploadedAt    DateTime          @default(now()) @map("uploaded_at")
  
  application   RentalApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@map("application_documents")
}
